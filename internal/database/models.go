// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0

package database

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type TenantType string

const (
	TenantTypeSupplier   TenantType = "supplier"
	TenantTypeCustomer   TenantType = "customer"
	TenantTypeSuperAdmin TenantType = "super_admin"
)

func (e *TenantType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TenantType(s)
	case string:
		*e = TenantType(s)
	default:
		return fmt.Errorf("unsupported scan type for TenantType: %T", src)
	}
	return nil
}

type NullTenantType struct {
	TenantType TenantType
	Valid      bool // Valid is true if TenantType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTenantType) Scan(value interface{}) error {
	if value == nil {
		ns.TenantType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TenantType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTenantType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TenantType), nil
}

type TypeNumber string

const (
	TypeNumberHome   TypeNumber = "home"
	TypeNumberMobile TypeNumber = "mobile"
	TypeNumberWork   TypeNumber = "work"
	TypeNumberOther  TypeNumber = "other"
)

func (e *TypeNumber) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TypeNumber(s)
	case string:
		*e = TypeNumber(s)
	default:
		return fmt.Errorf("unsupported scan type for TypeNumber: %T", src)
	}
	return nil
}

type NullTypeNumber struct {
	TypeNumber TypeNumber
	Valid      bool // Valid is true if TypeNumber is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTypeNumber) Scan(value interface{}) error {
	if value == nil {
		ns.TypeNumber, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TypeNumber.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTypeNumber) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TypeNumber), nil
}

type UserStatus string

const (
	UserStatusPreUsers UserStatus = "pre-users"
	UserStatusActive   UserStatus = "active"
	UserStatusInative  UserStatus = "inative"
)

func (e *UserStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserStatus(s)
	case string:
		*e = UserStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for UserStatus: %T", src)
	}
	return nil
}

type NullUserStatus struct {
	UserStatus UserStatus
	Valid      bool // Valid is true if UserStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserStatus) Scan(value interface{}) error {
	if value == nil {
		ns.UserStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserStatus), nil
}

type Address struct {
	ID         pgtype.UUID
	UserID     pgtype.UUID
	Address    pgtype.Text
	Street     pgtype.Text
	City       pgtype.Text
	State      pgtype.Text
	PostalCode pgtype.Text
	Country    pgtype.Text
	Number     pgtype.Text
	CreatedAt  pgtype.Timestamp
	UpdatedAt  pgtype.Timestamp
}

type Category struct {
	ID          pgtype.UUID
	Name        string
	Description string
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
}

type ContactInfo struct {
	ID        pgtype.UUID
	Name      string
	Email     string
	Phone     pgtype.Text
	CreatedAt pgtype.Timestamp
}

type Image struct {
	ID          pgtype.UUID
	Description pgtype.Text
	Url         pgtype.Text
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
}

type Permission struct {
	ID          pgtype.UUID
	Name        string
	Description string
}

type Product struct {
	ID                     pgtype.UUID
	Name                   string
	LowStockThreshold      pgtype.Int4
	ImageID                pgtype.UUID
	Price                  float64
	TenantID               pgtype.UUID
	Promotion              pgtype.Float8
	SafetyStockLevel       pgtype.Int4
	ReorderPoint           pgtype.Int4
	MinLot                 pgtype.Int4
	MaxLot                 pgtype.Int4
	FsnClassification      pgtype.Text
	Width                  pgtype.Int4
	Height                 pgtype.Int4
	Length                 pgtype.Int4
	Weight                 pgtype.Int4
	IsVariation            pgtype.Bool
	IsActive               pgtype.Bool
	CreatedAt              pgtype.Timestamp
	UpdatedAt              pgtype.Timestamp
	ProductUnitOfMeasureID pgtype.UUID
}

type ProductUnitOfMeasure struct {
	ID          pgtype.UUID
	Name        string
	Description string
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
}

type ProductVariation struct {
	ID        pgtype.UUID
	ProductID pgtype.UUID
	ImageID   pgtype.UUID
	Price     pgtype.Numeric
	Promotion pgtype.Numeric
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

type ProductVariationMapping struct {
	ID                 pgtype.UUID
	ProductVariationID pgtype.UUID
	VariationItemID    pgtype.UUID
	CreatedAt          pgtype.Timestamp
	UpdatedAt          pgtype.Timestamp
}

type ProductsCategory struct {
	ID         pgtype.UUID
	ProductID  pgtype.UUID
	CategoryID pgtype.UUID
}

type Role struct {
	ID          pgtype.UUID
	Name        string
	Description string
}

type RolesPermission struct {
	ID           pgtype.UUID
	RoleID       pgtype.UUID
	PermissionID pgtype.UUID
}

type TemplateEmail struct {
	ID          pgtype.UUID
	Name        string
	Url         string
	Description string
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
}

type Tenant struct {
	ID        pgtype.UUID
	Name      pgtype.Text
	TaxCode   pgtype.Text
	Type      NullTenantType
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

type User struct {
	ID             pgtype.UUID
	Name           pgtype.Text
	Email          string
	DocumentType   pgtype.Text
	DocumentNumber pgtype.Text
	Password       pgtype.Text
	Status         UserStatus
	RegisterToken  pgtype.Text
	TokenExpiresAt pgtype.Timestamp
	CreatedAt      pgtype.Timestamp
	UpdatedAt      pgtype.Timestamp
	TenantID       pgtype.UUID
	ImageID        pgtype.UUID
}

type UserPhone struct {
	ID        pgtype.UUID
	UserID    pgtype.UUID
	Type      TypeNumber
	Number    string
	IsPrimary bool
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

type UsersPermission struct {
	ID           pgtype.UUID
	UserID       pgtype.UUID
	PermissionID pgtype.UUID
}

type UsersRole struct {
	ID     pgtype.UUID
	UserID pgtype.UUID
	RoleID pgtype.UUID
}

type VariationCategory struct {
	ID          pgtype.UUID
	Name        string
	Description pgtype.Text
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
}

type VariationItem struct {
	ID                  pgtype.UUID
	VariationCategoryID pgtype.UUID
	Name                string
	CreatedAt           pgtype.Timestamp
	UpdatedAt           pgtype.Timestamp
}

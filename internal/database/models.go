// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0

package database

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type TenantType string

const (
	TenantTypeSupplier   TenantType = "supplier"
	TenantTypeCustomer   TenantType = "customer"
	TenantTypeSuperAdmin TenantType = "super_admin"
)

func (e *TenantType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TenantType(s)
	case string:
		*e = TenantType(s)
	default:
		return fmt.Errorf("unsupported scan type for TenantType: %T", src)
	}
	return nil
}

type NullTenantType struct {
	TenantType TenantType
	Valid      bool // Valid is true if TenantType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTenantType) Scan(value interface{}) error {
	if value == nil {
		ns.TenantType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TenantType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTenantType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TenantType), nil
}

type TypeNumber string

const (
	TypeNumberHome   TypeNumber = "home"
	TypeNumberMobile TypeNumber = "mobile"
	TypeNumberWork   TypeNumber = "work"
	TypeNumberOther  TypeNumber = "other"
)

func (e *TypeNumber) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TypeNumber(s)
	case string:
		*e = TypeNumber(s)
	default:
		return fmt.Errorf("unsupported scan type for TypeNumber: %T", src)
	}
	return nil
}

type NullTypeNumber struct {
	TypeNumber TypeNumber
	Valid      bool // Valid is true if TypeNumber is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTypeNumber) Scan(value interface{}) error {
	if value == nil {
		ns.TypeNumber, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TypeNumber.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTypeNumber) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TypeNumber), nil
}

type UserStatus string

const (
	UserStatusPreUsers UserStatus = "pre-users"
	UserStatusActive   UserStatus = "active"
	UserStatusInative  UserStatus = "inative"
)

func (e *UserStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserStatus(s)
	case string:
		*e = UserStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for UserStatus: %T", src)
	}
	return nil
}

type NullUserStatus struct {
	UserStatus UserStatus
	Valid      bool // Valid is true if UserStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserStatus) Scan(value interface{}) error {
	if value == nil {
		ns.UserStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserStatus), nil
}

type Address struct {
	ID         pgtype.UUID
	UserID     pgtype.UUID
	Address    pgtype.Text
	Street     pgtype.Text
	City       pgtype.Text
	State      pgtype.Text
	PostalCode pgtype.Text
	Country    pgtype.Text
	Number     pgtype.Text
	CreatedAt  pgtype.Timestamp
	UpdatedAt  pgtype.Timestamp
}

type ContactInfo struct {
	ID        pgtype.UUID
	Name      string
	Email     string
	Phone     pgtype.Text
	CreatedAt pgtype.Timestamp
}

type Image struct {
	ID          pgtype.UUID
	Description pgtype.Text
	Url         string
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
}

type Permission struct {
	ID          pgtype.UUID
	Name        string
	Description string
}

type Role struct {
	ID          pgtype.UUID
	Name        string
	Description string
}

type RolesPermission struct {
	ID           pgtype.UUID
	RoleID       string
	PermissionID string
}

type TemplateEmail struct {
	ID          pgtype.UUID
	Name        string
	Url         string
	Description string
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
}

type Tenant struct {
	ID        pgtype.UUID
	Name      pgtype.Text
	TaxCode   pgtype.Text
	Type      NullTenantType
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

type User struct {
	ID             pgtype.UUID
	Name           pgtype.Text
	Email          string
	DocumentType   pgtype.Text
	DocumentNumber pgtype.Text
	Password       pgtype.Text
	Status         UserStatus
	RegisterToken  pgtype.Text
	TokenExpiresAt pgtype.Timestamp
	CreatedAt      pgtype.Timestamp
	UpdatedAt      pgtype.Timestamp
	TenantID       string
	ImageID        string
}

type UserPhone struct {
	ID        pgtype.UUID
	UserID    pgtype.UUID
	Type      TypeNumber
	Number    string
	IsPrimary bool
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

type UsersPermission struct {
	ID           pgtype.UUID
	UserID       pgtype.Text
	PermissionID pgtype.Text
}

type UsersRole struct {
	ID     int32
	UserID pgtype.UUID
	RoleID pgtype.UUID
}

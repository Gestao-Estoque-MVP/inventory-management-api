// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: template_queries.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTemplate = `-- name: CreateTemplate :one
INSERT INTO template_email (id, name, url, description, created_at, updated_at) 
    VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, name
`

type CreateTemplateParams struct {
	ID          pgtype.UUID
	Name        string
	Url         string
	Description string
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
}

type CreateTemplateRow struct {
	ID   pgtype.UUID
	Name string
}

func (q *Queries) CreateTemplate(ctx context.Context, arg CreateTemplateParams) (CreateTemplateRow, error) {
	row := q.db.QueryRow(ctx, createTemplate,
		arg.ID,
		arg.Name,
		arg.Url,
		arg.Description,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i CreateTemplateRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getImageS3 = `-- name: GetImageS3 :one
SELECT url FROM image WHERE id = $1
`

func (q *Queries) GetImageS3(ctx context.Context, id pgtype.UUID) (string, error) {
	row := q.db.QueryRow(ctx, getImageS3, id)
	var url string
	err := row.Scan(&url)
	return url, err
}

const getTemplateS3 = `-- name: GetTemplateS3 :one
SELECT url FROM template_email WHERE id = $1
`

func (q *Queries) GetTemplateS3(ctx context.Context, id pgtype.UUID) (string, error) {
	row := q.db.QueryRow(ctx, getTemplateS3, id)
	var url string
	err := row.Scan(&url)
	return url, err
}

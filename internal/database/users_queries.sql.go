// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: users_queries.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const completeRegisterUser = `-- name: CompleteRegisterUser :one
UPDATE users SET phone = $1, document_type = $2, document_number = $3, password = $4, updated_at = $5 WHERE register_token = $6 RETURNING id, name, email
`

type CompleteRegisterUserParams struct {
	Phone          pgtype.Text
	DocumentType   pgtype.Text
	DocumentNumber pgtype.Text
	Password       pgtype.Text
	UpdatedAt      pgtype.Timestamp
	RegisterToken  pgtype.Text
}

type CompleteRegisterUserRow struct {
	ID    string
	Name  string
	Email string
}

func (q *Queries) CompleteRegisterUser(ctx context.Context, arg CompleteRegisterUserParams) (CompleteRegisterUserRow, error) {
	row := q.db.QueryRow(ctx, completeRegisterUser,
		arg.Phone,
		arg.DocumentType,
		arg.DocumentNumber,
		arg.Password,
		arg.UpdatedAt,
		arg.RegisterToken,
	)
	var i CompleteRegisterUserRow
	err := row.Scan(&i.ID, &i.Name, &i.Email)
	return i, err
}

const createPreRegisterUser = `-- name: CreatePreRegisterUser :one
INSERT INTO users (id, name, email, status, role_id, tenant_id, register_token, token_expires_at, created_at) 
    VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9) RETURNING id, name, email
`

type CreatePreRegisterUserParams struct {
	ID             string
	Name           string
	Email          string
	Status         UserStatus
	RoleID         pgtype.Text
	TenantID       string
	RegisterToken  pgtype.Text
	TokenExpiresAt pgtype.Timestamp
	CreatedAt      pgtype.Timestamp
}

type CreatePreRegisterUserRow struct {
	ID    string
	Name  string
	Email string
}

func (q *Queries) CreatePreRegisterUser(ctx context.Context, arg CreatePreRegisterUserParams) (CreatePreRegisterUserRow, error) {
	row := q.db.QueryRow(ctx, createPreRegisterUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Status,
		arg.RoleID,
		arg.TenantID,
		arg.RegisterToken,
		arg.TokenExpiresAt,
		arg.CreatedAt,
	)
	var i CreatePreRegisterUserRow
	err := row.Scan(&i.ID, &i.Name, &i.Email)
	return i, err
}

const createTenant = `-- name: CreateTenant :one
INSERT INTO tenant (id, name) 
    VALUES ($1, $2) RETURNING id, name
`

type CreateTenantParams struct {
	ID   string
	Name pgtype.Text
}

func (q *Queries) CreateTenant(ctx context.Context, arg CreateTenantParams) (Tenant, error) {
	row := q.db.QueryRow(ctx, createTenant, arg.ID, arg.Name)
	var i Tenant
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteUser = `-- name: DeleteUser :execresult
DELETE FROM users WHERE id = $1 RETURNING id, name, email
`

type DeleteUserRow struct {
	ID    string
	Name  string
	Email string
}

func (q *Queries) DeleteUser(ctx context.Context, id string) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, deleteUser, id)
}

const getTokenPreRegister = `-- name: GetTokenPreRegister :one
SELECT register_token, token_expires_at FROM users WHERE register_token = $1
`

type GetTokenPreRegisterRow struct {
	RegisterToken  pgtype.Text
	TokenExpiresAt pgtype.Timestamp
}

func (q *Queries) GetTokenPreRegister(ctx context.Context, registerToken pgtype.Text) (GetTokenPreRegisterRow, error) {
	row := q.db.QueryRow(ctx, getTokenPreRegister, registerToken)
	var i GetTokenPreRegisterRow
	err := row.Scan(&i.RegisterToken, &i.TokenExpiresAt)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, name, email, phone, document_type, document_number, password, status, register_token, token_expires_at, created_at, updated_at, role_id, tenant_id FROM users WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.DocumentType,
		&i.DocumentNumber,
		&i.Password,
		&i.Status,
		&i.RegisterToken,
		&i.TokenExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RoleID,
		&i.TenantID,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, phone, document_type, document_number, password, status, register_token, token_expires_at, created_at, updated_at, role_id, tenant_id FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.DocumentType,
		&i.DocumentNumber,
		&i.Password,
		&i.Status,
		&i.RegisterToken,
		&i.TokenExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RoleID,
		&i.TenantID,
	)
	return i, err
}

const getUserRegisterToken = `-- name: GetUserRegisterToken :one
SELECT id, name, email, phone, document_type, document_number, password, status, register_token, token_expires_at, created_at, updated_at, role_id, tenant_id FROM users WHERE register_token = $1
`

func (q *Queries) GetUserRegisterToken(ctx context.Context, registerToken pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserRegisterToken, registerToken)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.DocumentType,
		&i.DocumentNumber,
		&i.Password,
		&i.Status,
		&i.RegisterToken,
		&i.TokenExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RoleID,
		&i.TenantID,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, email, phone, document_type, document_number, password, status, register_token, token_expires_at, created_at, updated_at, role_id, tenant_id FROM users ORDER BY id
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.DocumentType,
			&i.DocumentNumber,
			&i.Password,
			&i.Status,
			&i.RegisterToken,
			&i.TokenExpiresAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RoleID,
			&i.TenantID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET name = $1, email = $2, phone = $3, document_type = $4, document_number = $5 WHERE id = $6
`

type UpdateUserParams struct {
	Name           string
	Email          string
	Phone          pgtype.Text
	DocumentType   pgtype.Text
	DocumentNumber pgtype.Text
	ID             string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.DocumentType,
		arg.DocumentNumber,
		arg.ID,
	)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users_queries.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
        name,
        email,
        document,
        password,
        mobile_phone,
        active,
        register_token,
        token_expires_at
    )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id
`

type CreateUserParams struct {
	Name           pgtype.Text
	Email          string
	Document       string
	Password       pgtype.Text
	MobilePhone    pgtype.Text
	Active         pgtype.Bool
	RegisterToken  pgtype.Text
	TokenExpiresAt pgtype.Timestamp
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Document,
		arg.Password,
		arg.MobilePhone,
		arg.Active,
		arg.RegisterToken,
		arg.TokenExpiresAt,
	)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT u.id,
    email,
    password,
    r.name AS role_name
FROM users u
    JOIN users_roles ur ON u.id = ur.user_id
    JOIN roles r ON ur.role_id = r.id
WHERE email = $1
`

type GetUserByEmailRow struct {
	ID       pgtype.UUID
	Email    string
	Password pgtype.Text
	RoleName string
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.RoleName,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: companies_queries.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const associateUserCompany = `-- name: AssociateUserCompany :one
INSERT INTO company_users (company_id, user_id)
VALUES ($1, $2)
RETURNING id, company_id, user_id, created_at, updated_at
`

type AssociateUserCompanyParams struct {
	CompanyID pgtype.UUID
	UserID    pgtype.UUID
}

func (q *Queries) AssociateUserCompany(ctx context.Context, arg AssociateUserCompanyParams) (CompanyUser, error) {
	row := q.db.QueryRow(ctx, associateUserCompany, arg.CompanyID, arg.UserID)
	var i CompanyUser
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createCompanies = `-- name: CreateCompanies :one
INSERT INTO companies (
        name,
        document,
        address_id
    )
VALUES ($1, $2, $3)
RETURNING id
`

type CreateCompaniesParams struct {
	Name      pgtype.Text
	Document  pgtype.Text
	AddressID pgtype.UUID
}

func (q *Queries) CreateCompanies(ctx context.Context, arg CreateCompaniesParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createCompanies, arg.Name, arg.Document, arg.AddressID)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

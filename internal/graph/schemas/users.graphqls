type Login {
  token: String!
}

type User {
  id: ID!
  name: String
  email: String
  phone: String
  document_number: String
  address: Address
  createdAt: String
  updatedAt: String
  user_phone: [UserPhone]
  role:  Roles!
  image: Image
}

type Tenant {
  id: String!
  name: String!
  tax_code: String!
  type: String!
}

type PreUser {
  id: ID!
  name: String!
  email: String!
}

type UserPhone {
  number: String!
  type: String!
  is_primary: Boolean
  user: User!

}

input NewTenant {
  name: String!
  tax_code: String!
  type: String!
}

input NewUserPhone {
  number: String!
  type: String!
  is_primary: Boolean
}

input NewPreUser {
  name: String!
  email: String!
  tenantId: String!
  user_phone: NewUserPhone!
  roleId: [String!]
}

input NewUserComplete {
  password: String!
  document_type: String!
  document_number: String!
  RegisterToken: String!
  image: NewImage
}

input NewUser {
  name: String!
  email: String!
  phone: String!
  document_type: String!
  document_number: String!
}

input VerifyToken {
  token: String!
}

type ContactInfo {
  id: ID!
  Name: String!
  email: String!
  phone: String!
}

type Address {
  id: String!
  address: String
  street: String
  number: String
  city: String
  state: String
  country: String
  postalCode: String
  userId: String
}

input NewContactInfo {
  Name: String!
  email: String!
  phone: String!
}

input NewAddress {
  address: String!
  street: String
  number: String
  city: String!
  state: String!
  country: String!
  postalCode: String!
  userId: String!
}


input NewLogin {
  email: String!
  password: String!
}

extend type Mutation {
  login(input: NewLogin!): Login! @goField(forceResolver: true)
  createContactInfo(input: NewContactInfo!): ContactInfo!
  createPreUser(input: NewPreUser!): Message! 
  createCompleteUser(input: NewUserComplete!): Message!
  createCompanyUser(input: NewPreUser!): Message! @auth @hasRole(role: users)
  createTenant(input: NewTenant!): Tenant! 
  updateUser(id: ID!, input: NewUser!): Message! @auth
  createAddress(input: NewAddress!): Message!
  verifyToken(input: VerifyToken!): Boolean!
}

extend type Query {
  user: User! @auth @goField(forceResolver: true)  
  users: [User!]! @goField(forceResolver: true) @auth @hasRole(role: admin)
}
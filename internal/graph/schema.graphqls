# GraphQL schema example
#
# https://gqlgen.com/getting-started/

directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

# new directive
directive @auth on FIELD_DEFINITION
directive @hasRole(role: Role!) on FIELD_DEFINITION

scalar Any
scalar Upload 

enum Role{
  users,
  admin,
}

type Login {
  token: String!
}

type Roles {
  id: ID!
  name: String!
  description: String!
}

type Permissions {
  id: ID!
  name: String!
  description: String!
}

type RolePermissions {
  id: ID!
  roleId: String!
  permissionId: String!
}

type ContactInfo {
  id: ID!
  Name: String!
  email: String!
  phone: String!
}

type Message {
  message: String!
}

type Template {
  id: ID!
  name: String!
  url: String!
}

input NewLogin {
  email: String!
  password: String!
}

input NewRole {
  name: String!
  description: String!
}

input NewPermission {
  name: String!
  description: String!
}

input NewRolePermission {
  roleId: String!
  permissionId: String!
}

input NewContactInfo {
  Name: String!
  email: String!
  phone: String!
}

input NewTemplate {
  file: Upload!
  name: String!
  description: String!
}



type Mutation {
  login(input: NewLogin!): Login! @goField(forceResolver: true)
  createContactInfo(input: NewContactInfo!): ContactInfo!
  createPreUser(input: NewPreUser!): PreUser!
  createCompleteUser(input: NewUserComplete!): User!
  updateUser(id: ID!, input: NewUser!): Message! @auth
  createAddress(input: NewAddress!): Message!
  uploadTemplate(input: NewTemplate!): Template! @auth @hasRole(role: users)
  createRole(input: NewRole!): Roles! 
  createPermission(input: NewPermission!): Permissions! @auth @hasRole(role: admin)
  createRolePermission(input: NewRolePermission!): RolePermissions! @auth @hasRole(role: admin)
}

type Query {
  user(id: ID!): User! @goField(forceResolver: true) @auth 
  users: [User!]! @goField(forceResolver: true) @auth @hasRole(role: admin)
  protected: String! @goField(forceResolver: true) @auth
  template(id: ID!): Template! @goField(forceResolver: true) @auth @hasRole(role: users)
}

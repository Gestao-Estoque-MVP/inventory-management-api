// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"github.com/99designs/gqlgen/graphql"
)

type Address struct {
	ID         string  `json:"id"`
	Address    *string `json:"address,omitempty"`
	Street     *string `json:"street,omitempty"`
	Number     *string `json:"number,omitempty"`
	City       *string `json:"city,omitempty"`
	State      *string `json:"state,omitempty"`
	Country    *string `json:"country,omitempty"`
	PostalCode *string `json:"postalCode,omitempty"`
	UserID     *string `json:"userId,omitempty"`
}

type Category struct {
	ID          string     `json:"id"`
	Name        string     `json:"name"`
	Description string     `json:"description"`
	Products    []*Product `json:"products,omitempty"`
}

type ContactInfo struct {
	ID    string `json:"id"`
	Name  string `json:"Name"`
	Email string `json:"email"`
	Phone string `json:"phone"`
}

type Image struct {
	ID          string `json:"id"`
	URL         string `json:"url"`
	Description string `json:"description"`
}

type Login struct {
	Token string `json:"token"`
}

type Message struct {
	Message string `json:"message"`
}

type NewAddress struct {
	Address    string  `json:"address"`
	Street     *string `json:"street,omitempty"`
	Number     *string `json:"number,omitempty"`
	City       string  `json:"city"`
	State      string  `json:"state"`
	Country    string  `json:"country"`
	PostalCode string  `json:"postalCode"`
	UserID     string  `json:"userId"`
}

type NewCategoryInput struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

type NewContactInfo struct {
	Name  string `json:"Name"`
	Email string `json:"email"`
	Phone string `json:"phone"`
}

type NewImage struct {
	File graphql.Upload `json:"file"`
}

type NewItemsVariations struct {
	VaritationCategoryID string `json:"varitation_category_id"`
	Name                 string `json:"name"`
}

type NewLogin struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type NewPermission struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

type NewPreUser struct {
	Name      string        `json:"name"`
	Email     string        `json:"email"`
	TenantID  string        `json:"tenantId"`
	UserPhone *NewUserPhone `json:"user_phone"`
	RoleID    []string      `json:"roleId,omitempty"`
}

type NewProductInput struct {
	Name                   string                `json:"name"`
	Price                  float64               `json:"price"`
	LowStockThreshold      *int                  `json:"lowStockThreshold,omitempty"`
	Image                  []*NewImage           `json:"image,omitempty"`
	TenantID               *string               `json:"tenantId,omitempty"`
	Promotion              *float64              `json:"promotion,omitempty"`
	SafetyStockLevel       *int                  `json:"safetyStockLevel,omitempty"`
	ReorderPoint           *int                  `json:"reorderPoint,omitempty"`
	MinLot                 *int                  `json:"minLot,omitempty"`
	MaxLot                 *int                  `json:"maxLot,omitempty"`
	FsnClassification      *string               `json:"fsnClassification,omitempty"`
	Width                  *float64              `json:"width,omitempty"`
	Height                 *float64              `json:"height,omitempty"`
	Length                 *float64              `json:"length,omitempty"`
	Weight                 *float64              `json:"weight,omitempty"`
	ProductUnitOfMeasureID *string               `json:"productUnitOfMeasureId,omitempty"`
	IsVariation            *bool                 `json:"isVariation,omitempty"`
	CategoryID             []string              `json:"categoryId,omitempty"`
	ItemsVariations        []*NewItemsVariations `json:"itemsVariations,omitempty"`
}

type NewProductUnitOfMeasureInput struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

type NewRole struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

type NewRolePermission struct {
	RoleID       string `json:"roleId"`
	PermissionID string `json:"permissionId"`
}

type NewTemplate struct {
	File        graphql.Upload `json:"file"`
	Name        string         `json:"name"`
	Description string         `json:"description"`
}

type NewTenant struct {
	Name    string `json:"name"`
	TaxCode string `json:"tax_code"`
	Type    string `json:"type"`
}

type NewUser struct {
	Name           string `json:"name"`
	Email          string `json:"email"`
	Phone          string `json:"phone"`
	DocumentType   string `json:"document_type"`
	DocumentNumber string `json:"document_number"`
}

type NewUserComplete struct {
	Password       string    `json:"password"`
	DocumentType   string    `json:"document_type"`
	DocumentNumber string    `json:"document_number"`
	RegisterToken  string    `json:"RegisterToken"`
	Image          *NewImage `json:"image,omitempty"`
}

type NewUserPhone struct {
	Number    string `json:"number"`
	Type      string `json:"type"`
	IsPrimary *bool  `json:"is_primary,omitempty"`
}

type NewVariationsCategoryInput struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

type Permissions struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

type PreUser struct {
	ID    string `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`
}

type Product struct {
	ID                     string      `json:"id"`
	Name                   string      `json:"name"`
	LowStockThreshold      int         `json:"lowStockThreshold"`
	Image                  *string     `json:"image,omitempty"`
	Price                  float64     `json:"price"`
	Tenant                 *Tenant     `json:"tenant,omitempty"`
	Promotion              string      `json:"promotion"`
	SafetyStockLevel       int         `json:"safetyStockLevel"`
	ReorderPoint           int         `json:"reorderPoint"`
	MinLot                 int         `json:"minLot"`
	MaxLot                 int         `json:"maxLot"`
	FsnClassification      string      `json:"fsnClassification"`
	Width                  float64     `json:"width"`
	Height                 float64     `json:"height"`
	Length                 float64     `json:"length"`
	Weight                 float64     `json:"weight"`
	ProductUnitOfMeasureID string      `json:"productUnitOfMeasureId"`
	IsVariation            bool        `json:"isVariation"`
	IsActive               bool        `json:"isActive"`
	CreatedAt              string      `json:"createdAt"`
	Description            string      `json:"description"`
	Category               []*Category `json:"category,omitempty"`
}

type ProductUnitOfMeasure struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

type RolePermissions struct {
	ID           string `json:"id"`
	RoleID       string `json:"roleId"`
	PermissionID string `json:"permissionId"`
}

type Roles struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

type Send struct {
	To         *string `json:"to,omitempty"`
	TemplateID string  `json:"templateID"`
	Subject    *string `json:"Subject,omitempty"`
	TypeSend   string  `json:"typeSend"`
}

type Tenant struct {
	ID      string `json:"id"`
	Name    string `json:"name"`
	TaxCode string `json:"tax_code"`
	Type    string `json:"type"`
}

type UpdateImageUser struct {
	File graphql.Upload `json:"file"`
}

type User struct {
	ID             string       `json:"id"`
	Name           *string      `json:"name,omitempty"`
	Email          *string      `json:"email,omitempty"`
	Phone          *string      `json:"phone,omitempty"`
	DocumentNumber *string      `json:"document_number,omitempty"`
	Address        *Address     `json:"address,omitempty"`
	CreatedAt      *string      `json:"createdAt,omitempty"`
	UpdatedAt      *string      `json:"updatedAt,omitempty"`
	UserPhone      []*UserPhone `json:"user_phone,omitempty"`
	Role           *Roles       `json:"role"`
	Image          *Image       `json:"image,omitempty"`
}

type UserPhone struct {
	Number    string `json:"number"`
	Type      string `json:"type"`
	IsPrimary *bool  `json:"is_primary,omitempty"`
	User      *User  `json:"user"`
}

type VariationsCategory struct {
	ID          string     `json:"id"`
	Name        string     `json:"name"`
	Description string     `json:"description"`
	Products    []*Product `json:"products,omitempty"`
}

type VerifyToken struct {
	Token string `json:"token"`
}

type Role string

const (
	RoleUsers Role = "users"
	RoleAdmin Role = "admin"
)

var AllRole = []Role{
	RoleUsers,
	RoleAdmin,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleUsers, RoleAdmin:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

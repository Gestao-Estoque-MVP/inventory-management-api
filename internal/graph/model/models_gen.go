// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"github.com/99designs/gqlgen/graphql"
)

type Address struct {
	ID         int    `json:"id"`
	Address    string `json:"address"`
	Street     string `json:"street"`
	Number     string `json:"number"`
	City       string `json:"city"`
	State      string `json:"state"`
	Country    string `json:"country"`
	PostalCode string `json:"postalCode"`
	UserID     string `json:"userId"`
}

type ContactInfo struct {
	ID    string `json:"id"`
	Name  string `json:"Name"`
	Email string `json:"email"`
	Phone string `json:"phone"`
}

type Login struct {
	Token string `json:"token"`
}

type Message struct {
	Message string `json:"message"`
}

type NewAddress struct {
	Address    string  `json:"address"`
	Street     *string `json:"street,omitempty"`
	Number     *string `json:"number,omitempty"`
	City       string  `json:"city"`
	State      string  `json:"state"`
	Country    string  `json:"country"`
	PostalCode string  `json:"postalCode"`
	UserID     string  `json:"userId"`
}

type NewContactInfo struct {
	Name  string `json:"Name"`
	Email string `json:"email"`
	Phone string `json:"phone"`
}

type NewLogin struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type NewPermission struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

type NewPreUser struct {
	Name   string `json:"name"`
	Email  string `json:"email"`
	Status string `json:"status"`
}

type NewRole struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

type NewRolePermission struct {
	RoleID       string `json:"roleId"`
	PermissionID string `json:"permissionId"`
}

type NewTemplate struct {
	File        graphql.Upload `json:"file"`
	Name        string         `json:"name"`
	Description string         `json:"description"`
}

type NewUser struct {
	Name           string `json:"name"`
	Email          string `json:"email"`
	Phone          string `json:"phone"`
	DocumentType   string `json:"document_type"`
	DocumentNumber string `json:"document_number"`
}

type NewUserComplete struct {
	Phone          string `json:"phone"`
	Password       string `json:"password"`
	DocumentType   string `json:"document_type"`
	DocumentNumber string `json:"document_number"`
	RegisterToken  string `json:"RegisterToken"`
}

type Permissions struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

type PreUser struct {
	ID    string `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`
}

type RolePermissions struct {
	ID           string `json:"id"`
	RoleID       string `json:"roleId"`
	PermissionID string `json:"permissionId"`
}

type Roles struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

type Template struct {
	ID   string `json:"id"`
	Name string `json:"name"`
	URL  string `json:"url"`
}

type User struct {
	ID             string   `json:"id"`
	Name           string   `json:"name"`
	Email          string   `json:"email"`
	Phone          string   `json:"phone"`
	DocumentNumber string   `json:"document_number"`
	Address        *Address `json:"address"`
}

type Role string

const (
	RoleUsers Role = "users"
	RoleAdmin Role = "admin"
)

var AllRole = []Role{
	RoleUsers,
	RoleAdmin,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleUsers, RoleAdmin:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

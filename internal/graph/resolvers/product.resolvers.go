package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"

	"github.com/diogoX451/inventory-management-api/internal/database"
	"github.com/diogoX451/inventory-management-api/internal/graph/middleware"
	"github.com/diogoX451/inventory-management-api/internal/graph/model"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, input model.NewCategoryInput) (*model.Message, error) {
	params := database.CreateCategoryParams{
		Name:        input.Name,
		Description: input.Description,
	}

	_, err := r.ProductService.CreateCategory(params)

	if err != nil {
		return nil, &gqlerror.Error{
			Message: "Error creating category",
		}
	}

	return &model.Message{
		Message: "Category created",
	}, nil
}

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, input model.NewProductInput) (*model.Message, error) {
	tenantID := middleware.CtxValue(ctx)
	input.TenantID = &tenantID.Tenant

	_, err := r.ProductService.CreateProduct(input)

	if err != nil {
		return nil, err
	}

	return &model.Message{
		Message: "Create",
	}, nil
}

// CreateProductUnitOfMeasure is the resolver for the createProductUnitOfMeasure field.
func (r *mutationResolver) CreateProductUnitOfMeasure(ctx context.Context, input model.NewProductUnitOfMeasureInput) (*model.Message, error) {
	params := database.CreateProductUnitsOfMeasureParams{
		Name:        input.Name,
		Description: input.Description,
	}

	_, err := r.ProductService.CreateProductUnitsOfMeasure(params)

	if err != nil {
		return nil, err
	}

	return &model.Message{
		Message: "Create",
	}, nil
}

// CreateVariationsCategory is the resolver for the createVariationsCategory field.
func (r *mutationResolver) CreateVariationsCategory(ctx context.Context, input model.NewVariationsCategoryInput) (*model.Message, error) {
	params := database.CreateVariationsCategoriesParams{
		Name:        input.Name,
		Description: pgtype.Text{String: input.Description, Valid: true},
	}

	_, err := r.ProductService.CreateVariationsCategories(params)

	if err != nil {
		return nil, err
	}

	return &model.Message{
		Message: "Create",
	}, nil
}

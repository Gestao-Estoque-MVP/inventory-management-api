package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"

	"github.com/diogoX451/inventory-management-api/internal/database"
	"github.com/diogoX451/inventory-management-api/internal/graph"
	"github.com/diogoX451/inventory-management-api/internal/graph/model"
	"github.com/diogoX451/inventory-management-api/pkg/convert"
	"github.com/jackc/pgx/v5/pgtype"
)

// CreateRole is the resolver for the createRole field.
func (r *mutationResolver) CreateRole(ctx context.Context, input model.NewRole) (*model.Roles, error) {
	role := database.Role{
		Name:        input.Name,
		Description: input.Description,
	}

	created, err := r.Resolver.RBCAService.CreateRoles(&role)

	if err != nil {
		return nil, err
	}

	response := &model.Roles{
		ID:          convert.UUIDToString(created.ID),
		Name:        created.Name,
		Description: created.Description,
	}

	return response, nil
}

// CreatePermission is the resolver for the createPermission field.
func (r *mutationResolver) CreatePermission(ctx context.Context, input model.NewPermission) (*model.Permissions, error) {
	permission := database.Permission{
		Name:        input.Name,
		Description: input.Description,
	}

	created, err := r.Resolver.RBCAService.CreatePermissions(&permission)

	if err != nil {
		return nil, err
	}

	return &model.Permissions{
		ID:          convert.UUIDToString(created.ID),
		Name:        created.Name,
		Description: created.Description,
	}, nil
}

// CreateRolePermission is the resolver for the createRolePermission field.
func (r *mutationResolver) CreateRolePermission(ctx context.Context, input model.NewRolePermission) (*model.RolePermissions, error) {
	assign := database.RolesPermission{
		RoleID:       pgtype.UUID{Bytes: convert.StringToByte16(input.RoleID), Valid: true},
		PermissionID: pgtype.UUID{Bytes: convert.StringToByte16(input.PermissionID), Valid: true},
	}

	created, err := r.Resolver.RBCAService.CreateRolesPermissions(&assign)

	if err != nil {
		return nil, err
	}

	return &model.RolePermissions{
		RoleID:       convert.UUIDToString(created.RoleID),
		PermissionID: convert.UUIDToString(created.PermissionID),
	}, nil
}

// Protected is the resolver for the protected field.
func (r *queryResolver) Protected(ctx context.Context) (string, error) {
	return "Success", nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

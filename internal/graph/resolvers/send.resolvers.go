package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"

	"github.com/diogoX451/inventory-management-api/internal/database"
	"github.com/diogoX451/inventory-management-api/internal/graph/middleware"
	"github.com/diogoX451/inventory-management-api/internal/graph/model"
	"github.com/diogoX451/inventory-management-api/internal/service"
	"github.com/diogoX451/inventory-management-api/pkg/convert"
	"github.com/gofrs/uuid"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// SendEmail is the resolver for the sendEmail field.
func (r *mutationResolver) SendEmail(ctx context.Context, input model.Send) (*model.Message, error) {
	var to []string
	if input.To != nil {
		to = []string{*input.To}
	}
	details := service.EmailDetails{
		Subject:    *input.Subject,
		TemplateID: uuid.FromStringOrNil(input.TemplateID),
		To:         to,
	}

	err := r.Resolver.EmailService.SendEmail(&details, input.TypeSend)

	if err != nil {
		return &model.Message{}, &gqlerror.Error{
			Message: "Error sending email " + err.Error(),
		}
	}

	return &model.Message{
		Message: "Email sent",
	}, nil
}

// UploadTemplate is the resolver for the uploadTemplate field.
func (r *mutationResolver) UploadTemplate(ctx context.Context, input model.NewTemplate) (*model.Message, error) {
	file := database.TemplateEmail{
		Name:        input.Name,
		Description: input.Description,
	}

	_, err := r.Resolver.S3Service.UploadTemplateS3(input.File.File, file)

	if err != nil {
		return nil, err
	}

	return &model.Message{
		Message: "Criado com Sucesso",
	}, nil
}

// UpdateImage is the resolver for the updateImage field.
func (r *mutationResolver) UpdateImage(ctx context.Context, input model.UpdateImageUser) (*model.Message, error) {
	userID := middleware.CtxValue(ctx)

	_, err := r.Resolver.ImageService.UpdateImageUser(convert.StringToPgUUID(userID.ID), input.File.File)

	if err != nil {
		return nil, err
	}

	return &model.Message{
		Message: "Atualizado com sucesso",
	}, nil
}

package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"
	"fmt"
	"io"

	"github.com/diogoX451/inventory-management-api/internal/database"
	"github.com/diogoX451/inventory-management-api/internal/graph/middleware"
	"github.com/diogoX451/inventory-management-api/internal/graph/model"
	"github.com/diogoX451/inventory-management-api/pkg/convert"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.NewLogin) (*model.Login, error) {
	access, err := r.Resolver.AuthUserService.UserLogin(ctx, input.Email, input.Password)

	if err != nil {
		return nil, err
	}

	accessMap, ok := access.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("access is not a map[string]interface{}: %v", access)
	}

	token, ok := accessMap["token"].(string)
	if !ok {
		return nil, fmt.Errorf("token is not a string: %v", accessMap["token"])
	}

	response := &model.Login{
		Token: token,
	}

	return response, nil
}

// CreateContactInfo is the resolver for the createContactInfo field.
func (r *mutationResolver) CreateContactInfo(ctx context.Context, input model.NewContactInfo) (*model.ContactInfo, error) {
	contact_info := database.ContactInfo{
		Name:  input.Name,
		Email: input.Email,
		Phone: pgtype.Text{String: input.Phone, Valid: true},
	}

	create, err := r.Resolver.ContactInfoService.CreateContactInfo(&contact_info)

	if err != nil {
		return nil, err
	}

	response := &model.ContactInfo{
		ID:    convert.UUIDToString(create.ID),
		Name:  create.Name,
		Email: create.Email,
		Phone: create.Phone.String,
	}

	return response, nil
}

// CreatePreUser is the resolver for the createPreUser field.
func (r *mutationResolver) CreatePreUser(ctx context.Context, input model.NewPreUser) (*model.Message, error) {
	user := database.CreatePreRegisterUserParams{
		Name:      pgtype.Text{String: input.Name, Valid: true},
		Email:     input.Email,
		TenantID:  convert.StringToPgUUID(input.TenantID),
		Number:    input.UserPhone.Number,
		Type:      database.TypeNumber(input.UserPhone.Type),
		IsPrimary: *input.UserPhone.IsPrimary,
	}

	_, err := r.Resolver.UserService.CreatePreUser(&user)

	if err != nil {
		return nil, &gqlerror.Error{
			Message: "Erro em criar o usuario",
		}
	}

	return &model.Message{
		Message: "Criado com Sucesso",
	}, nil
}

// CreateCompleteUser is the resolver for the createCompleteUser field.
func (r *mutationResolver) CreateCompleteUser(ctx context.Context, input model.NewUserComplete) (*model.Message, error) {
	user := database.CompleteRegisterUserParams{
		Password:       pgtype.Text{String: input.Password, Valid: true},
		DocumentType:   pgtype.Text{String: input.DocumentType, Valid: true},
		DocumentNumber: pgtype.Text{String: input.DocumentNumber, Valid: true},
	}

	var reader io.Reader
	if input.Image != nil {
		reader = input.Image.File.File
	}

	_, err := r.Resolver.UserService.CompleteRegisterUser(input.RegisterToken, &user, reader)

	if err != nil {
		return nil, err
	}

	return &model.Message{
		Message: "Registrado com Sucesso",
	}, err
}

// // CreateCompanyUser is the resolver for the createCompanyUser field.
func (r *mutationResolver) CreateCompanyUser(ctx context.Context, input model.NewPreUser) (*model.Message, error) {
	user := database.CreatePreRegisterUserParams{
		Name:     pgtype.Text{String: input.Name, Valid: true},
		Email:    input.Email,
		TenantID: pgtype.UUID{Bytes: convert.StringToByte16(input.TenantID), Valid: true},
	}

	_, err := r.Resolver.UserService.CreatePreUser(&user)

	if err != nil {
		return nil, &gqlerror.Error{
			Message: "Erro em criar o usuario",
		}
	}

	return &model.Message{
		Message: "Criado com Sucesso",
	}, nil
}

// CreateTenant is the resolver for the createTenant field.
func (r *mutationResolver) CreateTenant(ctx context.Context, input model.NewTenant) (*model.Tenant, error) {
	types := map[string]bool{
		string(database.TenantTypeCustomer):   true,
		string(database.TenantTypeSupplier):   true,
		string(database.TenantTypeSuperAdmin): true,
	}

	if _, isValid := types[input.Type]; !isValid {
		return nil, &gqlerror.Error{
			Message: "Invalid type tenant",
		}
	}

	params := &database.Tenant{
		Name:    pgtype.Text{String: input.Name, Valid: true},
		TaxCode: pgtype.Text{String: input.TaxCode, Valid: true},
		Type: database.NullTenantType{
			TenantType: database.TenantType(input.Type),
			Valid:      true,
		},
	}

	create, err := r.Resolver.UserService.CreateTenant(params)

	if err != nil {
		return nil, &gqlerror.Error{
			Message: "Error creating tenant",
		}
	}

	return &model.Tenant{
		ID:      convert.UUIDToString(create.ID),
		Name:    create.Name.String,
		TaxCode: create.TaxCode.String,
		Type:    string(create.Type.TenantType),
	}, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input model.NewUser) (*model.Message, error) {
	// user := database.UpdateUserParams{
	// 	Name:           pgtype.Text{String: input.Name, Valid: true},
	// 	Email:          input.Email,
	// 	DocumentNumber: pgtype.Text{String: input.DocumentNumber, Valid: true},
	// 	DocumentType:   pgtype.Text{String: input.DocumentType, Valid: true},
	// }

	// err := r.Resolver.UserService.UpdateUser(convert.UUIDToString(id), &user)

	// if err != nil {
	// 	return nil, &gqlerror.Error{
	// 		Message: "Error updating user",
	// 	}
	// }

	return &model.Message{
		Message: "Atualizado com sucesso",
	}, nil
}

// CreateAddress is the resolver for the createAddress field.
func (r *mutationResolver) CreateAddress(ctx context.Context, input model.NewAddress) (*model.Message, error) {
	address := database.Address{
		Address:    pgtype.Text{String: input.Address, Valid: true},
		Street:     pgtype.Text{String: *input.Street, Valid: true},
		City:       pgtype.Text{String: input.City, Valid: true},
		State:      pgtype.Text{String: input.State, Valid: true},
		PostalCode: pgtype.Text{String: input.PostalCode, Valid: true},
		Country:    pgtype.Text{String: input.Country, Valid: true},
		Number:     pgtype.Text{String: *input.Number, Valid: true},
		UserID:     convert.StringToPgUUID(input.UserID),
	}

	_, err := r.Resolver.AddressService.CreateAddress(&address)

	if err != nil {
		return nil, err
	}

	return &model.Message{
		Message: "Address created successfully",
	}, nil
}

// VerifyToken is the resolver for the verifyToken field.
func (r *mutationResolver) VerifyToken(ctx context.Context, input model.VerifyToken) (bool, error) {
	data := database.User{
		RegisterToken: pgtype.Text{String: input.Token, Valid: true},
	}

	verify := r.Resolver.UserService.VerifyToken(data.RegisterToken.String)

	return verify, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context) (*model.User, error) {
	id := middleware.CtxValue(ctx)

	find, err := r.Resolver.UserService.GetUser(convert.StringToPgUUID(id.ID))

	if err != nil {
		return nil, err
	}

	return &model.User{
		ID:             convert.UUIDToString(find.ID),
		Name:           &find.Name.String,
		Email:          &find.Email,
		DocumentNumber: &find.DocumentNumber.String,
		Address: &model.Address{
			ID:         convert.UUIDToString(find.Address.ID),
			City:       &find.Address.City.String,
			Address:    &find.Address.Address.String,
			Street:     &find.Address.Street.String,
			Number:     &find.Address.Number.String,
			State:      &find.Address.State.String,
			Country:    &find.Address.Country.String,
			PostalCode: &find.Address.PostalCode.String,
		},
		UserPhone: []*model.UserPhone{
			{
				Number:    find.UserPhone.Number,
				Type:      string(find.UserPhone.Type),
				IsPrimary: &find.UserPhone.IsPrimary,
			},
		},
		Image: &model.Image{
			ID:          convert.UUIDToString(find.Image.ID),
			URL:         find.Image.Url.String,
			Description: find.Image.Description.String,
		},
	}, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	getUser, err := r.Resolver.UserService.GetUsers()

	if err != nil {
		return nil, err
	}

	var users []*model.User
	for _, user := range getUser {
		consult, err := r.Resolver.AddressService.GetAddressByID(user.ID.Bytes)

		if err != nil {
			continue
		}

		listUser := &model.User{
			ID:             convert.UUIDToString(user.ID),
			Name:           &user.Name.String,
			Email:          &user.Email,
			DocumentNumber: &user.DocumentNumber.String,
			Address: &model.Address{
				Address:    &consult.Address.String,
				Street:     &consult.Street.String,
				Number:     &consult.Number.String,
				City:       &consult.City.String,
				State:      &consult.State.String,
				Country:    &consult.Country.String,
				PostalCode: &consult.PostalCode.String,
			},
		}

		users = append(users, listUser)
	}

	return users, nil
}
